print("192372022-V Navya")
import itertools

def tsp_brute_force(graph, start):
    cities = list(graph.keys())
    cities.remove(start)
    min_cost = float('inf')
    best_path = []

    for perm in itertools.permutations(cities):
        cost = 0
        current = start
        path = [start]

        for city in perm:
            cost += graph[current][city]
            current = city
            path.append(city)
        cost += graph[current][start]  # return to start
        path.append(start)

        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# Example distance matrix using adjacency dictionary
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}

if __name__ == "__main__":
    path, cost = tsp_brute_force(graph, 'A')
    print("Best Path:", " -> ".join(path))
    print("Minimum Cost:", cost)

